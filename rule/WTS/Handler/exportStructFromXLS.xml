<?xml version="1.0" encoding="UTF-8"?>
<rule type="handler" id="exportFromXLS">
	<rununderuser source="macro">CURRENT_USER</rununderuser>
	<trigger>provider</trigger>
	<script><![CDATA[
			String doHandler(_Session session, _DocumentCollection collection){
				
				def db = session.getCurrentDatabase();
				
				def struct = db.dataBase.getStructure();
				def glossaries = db.dataBase.getGlossaries();						
				def chars = ["\u0430":"a", "\u0431":"b", "\u0432":"v", "\u0433":"g", "\u0434":"d", "\u0435":"e", "\u0205":"e", "\u0436":"zh", "\u0437":"z", "\u0438":"i", "\u0439":"y", "\u043A":"k", 
				"\u043B":"l", "\u043C":"m", "\u043D":"n", "\u043E":"o", "\u043F":"p", "\u0440":"r", "\u0441":"s", "\u0442":"t", "\u0443":"u", "\u0444":"f", "\u0445":"kh", "\u0446":"ts", "\u0447":"ch", 
				"\u0448":"sh", "\u0449":"shch", "\u044A":"", "\u044B":"y", "\u044C":"", "\u044D":"e", "\u044E":"yu", "\u044F":"ya", "\u04D9":"a", "\u0069":"i", "\u04A3":"n", "\u0493":"g", "\u04AF":"u", "\u04B1":"u", "\u049B":"k", "\u04E9":"o", "\u04BB":"kh", "\u04BA":"kh"];
				def split = {str ->
					StringTokenizer token = new StringTokenizer(str, " ");
					String[] elements = new String[token.countTokens()];
					int i = 0;
					while (token.hasMoreTokens()) {						
						elements[i] = token.nextToken().trim().replace(".", "");
						i++;
					}
					return elements;
				}
				
				def transliterate = {str ->
					for (String s : chars.keySet()) {
						if (str.contains(s)) {
							str = str.replace(s, chars.get(s));
						}
						if (str.contains(s.toUpperCase())) {
							str = str.replace(s.toUpperCase(), chars.get(s).toUpperCase());
						}
					}
					return str;				
				}
				
			 	def formatUserID = {str ->
			 		def fio = split(str);
			 		
			 		String login = "";
					if (fio.length >= 2 && fio[1].length() >= 3) {
						login = fio[1].substring(0, 3);
					} else if (fio.length >= 2 && fio[1].length() >= 1) {
						login = fio[1].substring(0, 3);
					}
					if (fio.length >= 1 && fio[0].length() <= 7) {
						login += fio[0];
					} else if (login.length() > 0){
						login += fio[0].substring(0, 7);
					} else {
						login += fio[0].substring(0, 8);
					}
					return login;
			 	}
				
				def createOrg = {orgName->					
					def organization = new Organization(struct);
					organization.setFullName(orgName);
					organization.setShortName(orgName);
					organization.setViewText(orgName);
					organization.setAddress("");
					organization.setComment("");
					organization.setIsMain(1);
					organization.save(Const.sysGroupAsSet, Const.sysUser);
					return organization;
				}
				def createDep = {depName, parentUnit->
					def department = new Department(struct);
					department.setFullName(depName);
					department.setShortName(depName);
					department.setViewText(depName);
					department.setComment("");
					switch (parentUnit.docType) {
						case Const.DOCTYPE_ORGANIZATION:
							department.setOrgID(parentUnit.getDocID());
							break;
						case Const.DOCTYPE_DEPARTMENT:
							department.setMainID(parentUnit.getDocID());
							break;
						case Const.DOCTYPE_EMPLOYER:
							department.setEmpID(parentUnit.getDocID());
							break;
					}				
					department.parentDocID = parentUnit.getDocID();
					department.parentDocType = parentUnit.docType;
					department.save(Const.sysGroupAsSet, Const.sysUser);
					return department;
				}
				
			try {
				/*File errors = new File("errors.log");
				PrintWriter printer = new PrintWriter(errors);
				File file = new File("errors.log");*/				
											
				File xlsFile = new File("Structure.xls");
								
				Workbook workbook = Workbook.getWorkbook(xlsFile);
								
				Sheet sheet = workbook.getSheet(0);	
				
								
				println(sheet.getRows());
				println(sheet.getColumns());
								
				def org;
				def dep;
				def mainDep;
				def emp;
				int orgID;
				int depID;
				int empID;
				int postID;
				for (int i = 0; i <= sheet.getRows()-2; i++) {
					for (int j = 0; j <= sheet.getColumns()-2; j++) {
						Cell cell = sheet.getCell(j, i);
						if (cell.getType() != CellType.EMPTY && cell.getType() != CellType.NUMBER) {
							LabelCell labCell = (LabelCell) cell;							
							String value = labCell.getString().trim();
							
							if (value.contains("\u0422\u041E\u041E")) {
							
								orgID = struct.hasUnit(value, Const.DOCTYPE_ORGANIZATION);
								if (orgID == 0){
									org = createOrg(value);							
								} else {
									org = struct.getOrganization(orgID, Const.sysGroupAsSet, Const.sysUser);									
								}
								dep = org;
								continue;
							} 		
							
							if (value.contains("№ п/п") || value.contains("Ранг") || value.contains("Ф.И.О.") || value.contains("Должность")) continue;
							
							
							if (j == 2) {
								Colour cellBackground = labCell.getCellFormat().getBackgroundColour();
								Cell nextCell = sheet.getCell(j+2, i);
								if (cellBackground == Colour.TAN && nextCell.getType() == CellType.EMPTY) {
									
									depID = struct.hasUnit(value, Const.DOCTYPE_DEPARTMENT);
									if ( depID == 0){
										mainDep = createDep(value, org);
									} else {
										mainDep = struct.getDepartment(depID, Const.sysGroupAsSet, Const.sysUser);
									}									
									dep = mainDep;
									continue;
								}
								
								
								
								if (cellBackground == Colour.DEFAULT_BACKGROUND && nextCell.getType() == CellType.EMPTY) {
									
									depID = struct.hasUnit(value, Const.DOCTYPE_DEPARTMENT);
									if ( depID == 0){
										dep = createDep(value, mainDep);
									} else {
										dep = struct.getDepartment(depID, Const.sysGroupAsSet, Const.sysUser);
									} 
									continue;
								}								
							
								postID = glossaries.getGlossaryElementID(value, "post");
								if (postID == 0) {
									def glos = new Glossary(db.dataBase);
									glos.setName(value);
									glos.setViewText(value);
									glos.setCode("0");
									glos.addStringField("ranktext", "0");
									glos.defaultRuleID = "post";
									glos.form = "post";
									glos.save(Const.sysGroupAsSet, Const.sysUser);
									postID = glos.getDocID();
									
								} 
								continue;							
								
							}
							if (j == 4) {
								Cell nextCell = sheet.getCell(j+1, i);
								if (nextCell.getType() == CellType.EMPTY) {
									if (value.equalsIgnoreCase("вакансия")) continue;
									String fio = transliterate(value);
									String userid = formatUserID(fio).toLowerCase();
									if (!struct.getAppUser(fio)) {
										User user = new User(userid);
										user.setPassword("123");
										//смертельный номер
										def redURL = db.dataBase.getParent().globalSetting.syncroGlobalSettings.redirectURLs;
										user.redirectURLs = redURL;
										emp = new Employer(struct);	
										emp.setUser(user);
										emp.setFullName(value);
										emp.setViewText(value);
										String[] fios = split(value);
										String shortName = fios[0];
										
										if (fios.length >= 2) {
											shortName += " " + fios[1].substring(0, 1);
										} 
										if (fios.length == 3) {
											shortName += " " + fios[2].substring(0, 1);
										}
										emp.setShortName(shortName);
										emp.setPostID(postID);
										emp.parentDocType = dep.docType;
										emp.parentDocID = dep.getDocID();										
										switch (dep.docType) {
											case Const.DOCTYPE_ORGANIZATION:
												emp.setOrgID(dep.getDocID());
												break;
											case Const.DOCTYPE_DEPARTMENT:
												emp.setDepID(dep.getDocID());
												break;
											case Const.DOCTYPE_EMPLOYER:
												emp.setBossID(dep.getDocID());
												break;
										}									
										
										emp.save(Const.sysGroupAsSet, Const.sysUser);
									}
								}
							}							
						}
					}
				}
				//printer.flush();
				//printer.close();
			} catch(Exception e) {
				e.printStackTrace();
			} 
			}
			]]> 
	</script>
</rule>
